#!/usr/bin/env bash
set -e

# 创建脚本目录
mkdir -p scripts

# 智能检测Android项目结构
detect_android_project() {
  local project_root=""
  local current_dir="$(pwd)"
  
  # 向上查找Android项目根目录
  while [ "$current_dir" != "/" ]; do
    if [ -f "$current_dir/build.gradle" ] || [ -f "$current_dir/build.gradle.kts" ]; then
      if [ -f "$current_dir/settings.gradle" ] || [ -f "$current_dir/settings.gradle.kts" ]; then
        project_root="$current_dir"
        break
      fi
    fi
    current_dir=$(dirname "$current_dir")
  done
  
  if [ -z "$project_root" ]; then
    # 如果没有找到根目录，检查当前目录是否是模块目录
    if [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
      echo "module"
      return
    else
      echo "not_android"
      return
    fi
  fi
  
  echo "$project_root"
}

# 检测项目类型和结构
PROJECT_LOCATION=$(detect_android_project)

if [ "$PROJECT_LOCATION" = "not_android" ]; then
  echo "❌ 错误：当前目录不是Android项目"
  echo "   请在Android项目根目录或模块目录下运行此脚本"
  exit 1
elif [ "$PROJECT_LOCATION" = "module" ]; then
  echo "🔍 检测到当前目录是Android模块，将为模块配置lint"
  PROJECT_ROOT="$(pwd)"
  IS_MODULE=true
else
  echo "🔍 检测到Android项目根目录: $PROJECT_LOCATION"
  PROJECT_ROOT="$PROJECT_LOCATION"
  IS_MODULE=false
fi

# 检测DSL类型
DSL_TYPE="unknown"
if [ -f "$PROJECT_ROOT/build.gradle.kts" ] || [ -f "build.gradle.kts" ]; then
  DSL_TYPE="kotlin"
elif [ -f "$PROJECT_ROOT/build.gradle" ] || [ -f "build.gradle" ]; then
  DSL_TYPE="groovy"
fi

# 检测模块类型
MODULE_TYPE="unknown"
if [ -f "build.gradle" ]; then
  if grep -q "com.android.application" "build.gradle" 2>/dev/null; then
    MODULE_TYPE="app"
  elif grep -q "com.android.library" "build.gradle" 2>/dev/null; then
    MODULE_TYPE="library"
  fi
elif [ -f "build.gradle.kts" ]; then
  if grep -q "com.android.application" "build.gradle.kts" 2>/dev/null; then
    MODULE_TYPE="app"
  elif grep -q "com.android.library" "build.gradle.kts" 2>/dev/null; then
    MODULE_TYPE="library"
  fi
fi

echo "📋 项目信息："
echo "   DSL类型: $DSL_TYPE"
echo "   模块类型: $MODULE_TYPE"
echo "   是否为模块: $IS_MODULE"

# 安全生成配置文件的函数
safe_create_file() {
  local file_path="$1"
  local file_content="$2"
  
  if [ -f "$file_path" ]; then
    echo "⚠️  $file_path 已存在，创建备份: ${file_path}.backup"
    cp "$file_path" "${file_path}.backup"
  fi
  
  echo "$file_content" > "$file_path"
  echo "✅ 已生成: $file_path"
}

# 生成 lint.xml 配置文件
LINT_CONFIG='<?xml version="1.0" encoding="UTF-8"?>
<lint>
    <!-- 错误级别规则 -->
    <issue id="HardcodedText" severity="error" />
    <issue id="MissingTranslation" severity="error" />
    <issue id="UnusedResources" severity="error" />
    <issue id="IconMissingDensityFolder" severity="error" />
    <issue id="SecurityLogCatch" severity="error" />
    <issue id="LogConditional" severity="error" />
    
    <!-- 警告级别规则 -->
    <issue id="UselessParent" severity="warning" />
    <issue id="InefficientWeight" severity="warning" />
    <issue id="NestedWeights" severity="warning" />
    <issue id="DisableBaselineAlignment" severity="warning" />
    <issue id="ObsoleteLayoutParam" severity="warning" />
    <issue id="Overdraw" severity="warning" />
    
    <!-- 性能相关 -->
    <issue id="DrawAllocation" severity="warning" />
    <issue id="Recycle" severity="error" />
    <issue id="WakelockTimeout" severity="warning" />
    
    <!-- 安全相关 -->
    <issue id="AllowBackup" severity="warning" />
    <issue id="ExportedActivity" severity="warning" />
    <issue id="ExportedReceiver" severity="warning" />
    <issue id="ExportedService" severity="warning" />
    
    <!-- 忽略的规则 -->
    <issue id="GoogleAppIndexingWarning" severity="ignore" />
    <issue id="LintBaseline" severity="ignore" />
    
    <!-- Kotlin 相关 -->
    <issue id="UnsafeCall" severity="error" />
    <issue id="NullSafeMutableLiveData" severity="warning" />
</lint>'

safe_create_file "lint.xml" "$LINT_CONFIG"

# 生成 ktlint 配置文件 (.editorconfig)
EDITORCONFIG='root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 4
insert_final_newline = true
max_line_length = 120
trim_trailing_whitespace = true

[*.{kt,kts}]
indent_size = 4
continuation_indent_size = 4

[*.{xml,html}]
indent_size = 4

[*.{json,yml,yaml}]
indent_size = 2

[*.md]
trim_trailing_whitespace = false'

safe_create_file ".editorconfig" "$EDITORCONFIG"

# 生成 .gitignore（如果不存在）
if [ ! -f ".gitignore" ]; then
cat <<EOF > .gitignore
# Built application files
*.apk
*.aab

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/
release/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/

# IntelliJ
*.iml
.idea/workspace.xml
.idea/tasks.xml
.idea/gradle.xml
.idea/assetWizardSettings.xml
.idea/dictionaries
.idea/libraries
.idea/jarRepositories.xml
.idea/caches
.idea/modules.xml
.idea/.name
.idea/compiler.xml
.idea/copyright/profiles_settings.xml
.idea/encodings.xml
.idea/scopes/scope_settings.xml
.idea/vcs.xml
.idea/jsLibraryMappings.xml
.idea/datasources.xml
.idea/dataSources.ids
.idea/sqlDataSources.xml
.idea/dynamic.xml
.idea/uiDesigner.xml

# OS-specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Android Lint
lint-results.html
lint-results_files/
lint-report.txt

# Ktlint
.ktlint

# Backup files
*.bak
EOF
fi

# 生成智能的Gradle配置
generate_gradle_config() {
  if [ "$DSL_TYPE" = "kotlin" ]; then
    cat > "gradle-lint-config.kts" << 'EOF'
// ============================================
// Android Lint 配置
// ============================================
// 将以下内容添加到你的模块 build.gradle.kts 文件的 android {} 块中

android {
    lint {
        // 基本配置
        abortOnError = false  // 建议先设为false，修复问题后再设为true
        warningsAsErrors = false
        checkDependencies = true
        checkGeneratedSources = false
        explainIssues = true
        
        // 忽略的文件和目录
        ignoreTestSources = true
        ignoreTestFixturesSources = true
        
        // 输出格式
        htmlReport = true
        htmlOutput = file("$buildDir/reports/lint/lint-results.html")
        xmlReport = true
        xmlOutput = file("$buildDir/reports/lint/lint-results.xml")
        textReport = true
        textOutput = file("$buildDir/reports/lint/lint-results.txt")
        
        // 使用配置文件
        lintConfig = file("lint.xml")
        
        // 基线文件（可选）
        // baseline = file("lint-baseline.xml")
    }
}

// ============================================
// Ktlint 配置
// ============================================
// 1. 在项目根目录的 build.gradle.kts 添加插件：
/*
plugins {
    id("org.jlleitschuh.gradle.ktlint") version "12.0.3" apply false
}
*/

// 2. 在模块的 build.gradle.kts 添加：
/*
plugins {
    id("org.jlleitschuh.gradle.ktlint")
}

ktlint {
    version.set("1.0.1")
    debug.set(false)
    verbose.set(true)
    android.set(true)
    outputToConsole.set(true)
    outputColorName.set("RED")
    ignoreFailures.set(false)
    
    filter {
        exclude("**/generated/**")
        exclude("**/build/**")
        include("**/kotlin/**")
        include("**/java/**")
    }
}
*/
EOF
  else
    cat > "gradle-lint-config.gradle" << 'EOF'
// ============================================
// Android Lint 配置
// ============================================
// 将以下内容添加到你的模块 build.gradle 文件的 android {} 块中

android {
    lint {
        // 基本配置
        abortOnError false  // 建议先设为false，修复问题后再设为true
        warningsAsErrors false
        checkDependencies true
        checkGeneratedSources false
        explainIssues true
        
        // 忽略的文件和目录
        ignoreTestSources true
        ignoreTestFixturesSources true
        
        // 输出格式
        htmlReport true
        htmlOutput file("$buildDir/reports/lint/lint-results.html")
        xmlReport true
        xmlOutput file("$buildDir/reports/lint/lint-results.xml")
        textReport true
        textOutput file("$buildDir/reports/lint/lint-results.txt")
        
        // 使用配置文件
        lintConfig file("lint.xml")
        
        // 基线文件（可选）
        // baseline file("lint-baseline.xml")
    }
}

// ============================================
// Ktlint 配置
// ============================================
// 1. 在项目根目录的 build.gradle 添加插件：
/*
plugins {
    id "org.jlleitschuh.gradle.ktlint" version "12.0.3" apply false
}
*/

// 2. 在模块的 build.gradle 添加：
/*
apply plugin: "org.jlleitschuh.gradle.ktlint"

ktlint {
    version = "1.0.1"
    debug = false
    verbose = true
    android = true
    outputToConsole = true
    outputColorName = "RED"
    ignoreFailures = false
    
    filter {
        exclude("**/generated/**")
        exclude("**/build/**")
        include("**/kotlin/**")
        include("**/java/**")
    }
}
*/
EOF
  fi
  
  echo "✅ 已生成: gradle-lint-config.${DSL_TYPE}"
}

generate_gradle_config

# 生成智能的Makefile
MAKEFILE_CONTENT=".PHONY: lint ktlint format commit commit-force setup help

help:
	@echo \"📋 可用命令:\"
	@echo \"  make lint         - 运行 Android Lint 检查\"
	@echo \"  make ktlint       - 运行 Ktlint 检查\"
	@echo \"  make format       - 自动格式化 Kotlin 代码\"
	@echo \"  make commit       - 智能提交（有检查）\"
	@echo \"  make commit-force - 强制提交（跳过检查）\"
	@echo \"  make setup        - 显示配置说明\"

lint:
	@if [ -f \"gradlew\" ]; then \\
		echo \"🔍 运行 Android Lint...\"; \\
		./gradlew lint || echo \"⚠️ Lint 检查发现问题，请查看报告\"; \\
	else \\
		echo \"❌ 未找到 gradlew，请在项目根目录运行\"; \\
	fi

ktlint:
	@if [ -f \"gradlew\" ]; then \\
		echo \"🔍 运行 Ktlint 检查...\"; \\
		./gradlew ktlintCheck || echo \"⚠️ Ktlint 检查发现问题\"; \\
	else \\
		echo \"❌ 未找到 gradlew，请在项目根目录运行\"; \\
	fi

format:
	@if [ -f \"gradlew\" ]; then \\
		echo \"🔧 格式化 Kotlin 代码...\"; \\
		./gradlew ktlintFormat || echo \"⚠️ 项目可能未配置 Ktlint\"; \\
	else \\
		echo \"❌ 未找到 gradlew，请在项目根目录运行\"; \\
	fi

commit:
	bash scripts/android-smart-commit.sh

commit-force:
	bash scripts/android-smart-commit.sh --force

setup:
	@echo \"📋 配置说明：\"
	@echo \"1. 将 gradle-lint-config.${DSL_TYPE} 中的内容添加到对应的 Gradle 文件\"
	@echo \"2. 如需使用 Ktlint，取消注释配置文件中的 Ktlint 相关配置\"
	@echo \"3. 运行 ./gradlew ktlintApplyToIdea 来配置 Android Studio（可选）\"
	@echo \"4. 使用 'make lint' 运行 Android Lint 检查\"
	@echo \"5. 使用 'make help' 查看所有可用命令\"
	@echo \"\"
	@echo \"📁 生成的文件：\"
	@echo \"   - lint.xml: Android Lint 规则配置\"
	@echo \"   - .editorconfig: 代码风格配置\"
	@echo \"   - gradle-lint-config.${DSL_TYPE}: Gradle 配置示例\"
	@echo \"   - scripts/android-smart-commit.sh: 智能提交脚本\"
	@echo \"\"
	@echo \"🔧 项目信息：\"
	@echo \"   - DSL类型: ${DSL_TYPE}\"
	@echo \"   - 模块类型: ${MODULE_TYPE}\"
	@echo \"   - 项目根目录: ${PROJECT_ROOT}\""

safe_create_file "Makefile" "$MAKEFILE_CONTENT"

# 生成 Android 智能提交脚本
cat <<'EOF' > scripts/android-smart-commit.sh
#!/usr/bin/env bash
set -e

# 检查强制模式
FORCE_MODE=false
if [[ "$1" == "--force" ]]; then
  FORCE_MODE=true
fi

# 检查是否在Android项目根目录
if [ ! -f "build.gradle" ] && [ ! -f "build.gradle.kts" ]; then
  echo "❌ 错误：请在Android项目根目录下运行此脚本"
  exit 1
fi

# 自动添加文件变更
if [ -n "$(git diff --name-only)" ] || [ -n "$(git diff --cached --name-only)" ]; then
  echo "📦 检测到文件变更，自动执行 git add ."
  git add .
fi

echo ""
echo "✨ Step 1: Ktlint 格式化"
if [ -f "gradlew" ]; then
  # 询问是否需要格式化 - 默认为否
  read -p "🤔 是否运行 Ktlint 自动格式化？(y/N): " FORMAT_CONFIRM
  FORMAT_CONFIRM=${FORMAT_CONFIRM:-n}
  
  if [[ "$FORMAT_CONFIRM" =~ ^[Yy]$ ]]; then
    echo "🔧 正在运行 Ktlint 格式化..."
    if ./gradlew ktlintFormat > /dev/null 2>&1; then
      echo "✅ Ktlint 格式化完成"
      if [ -n "$(git diff --name-only)" ]; then
        echo "📦 格式化后检测到文件变更，自动暂存"
        git add .
      fi
    else
      echo "⚠️ Ktlint 格式化失败，可能项目未配置 Ktlint"
    fi
  else
    echo "⏩ 跳过 Ktlint 格式化"
  fi
else
  echo "⚠️ 未找到 gradlew，跳过 Ktlint 格式化"
fi

echo ""
echo "🔍 Step 2: 运行 Ktlint 检查..."
if [ -f "gradlew" ]; then
  if ./gradlew ktlintCheck; then
    echo "✅ Ktlint 检查通过"
  else
    echo "⛔ Ktlint 检查失败"
    if [ "$FORCE_MODE" = false ]; then
      read -p "🤔 是否继续提交？(Y/n): " CONTINUE_CONFIRM
      CONTINUE_CONFIRM=${CONTINUE_CONFIRM:-y}
      if [[ "$CONTINUE_CONFIRM" =~ ^[Nn]$ ]]; then
        echo "❌ 已取消提交"
        exit 1
      fi
    else
      echo "⚠️ 强制模式：忽略 Ktlint 错误继续提交"
    fi
  fi
else
  echo "⚠️ 未找到 gradlew，跳过 Ktlint 检查"
fi

echo ""
echo "🔍 Step 3: 运行 Android Lint 检查..."
if [ -f "gradlew" ]; then
  if ./gradlew lint; then
    echo "✅ Android Lint 检查通过"
  else
    echo "⛔ Android Lint 检查失败"
    echo "📋 查看详细报告: build/reports/lint/lint-results.html"
    if [ "$FORCE_MODE" = false ]; then
      read -p "🤔 是否继续提交？(Y/n): " CONTINUE_CONFIRM
      CONTINUE_CONFIRM=${CONTINUE_CONFIRM:-y}
      if [[ "$CONTINUE_CONFIRM" =~ ^[Nn]$ ]]; then
        echo "❌ 已取消提交"
        exit 1
      fi
    else
      echo "⚠️ 强制模式：忽略 Android Lint 错误继续提交"
    fi
  fi
else
  echo "⚠️ 未找到 gradlew，跳过 Android Lint 检查"
fi

echo ""
echo "🤖 Step 4: 生成提交信息并提交..."
echo "📝 正在调用 GPTCommit 生成提交信息..."
git commit --quiet --no-edit
echo ""
echo "🎉 提交完成！"
EOF

chmod +x scripts/android-smart-commit.sh

# 创建示例 Kotlin Activity（如果 app/src/main/java 目录存在）
if [ -d "app/src/main/java" ]; then
  # 查找包名
  PACKAGE_DIR=$(find app/src/main/java -type d -mindepth 1 | head -1)
  if [ -n "$PACKAGE_DIR" ]; then
    PACKAGE_NAME=$(echo "$PACKAGE_DIR" | sed 's|app/src/main/java/||' | tr '/' '.')
    
    cat <<EOF > "${PACKAGE_DIR}/ExampleActivity.kt"
package ${PACKAGE_NAME}

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity

/**
 * 示例 Activity - 展示代码规范
 */
class ExampleActivity : AppCompatActivity() {
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // 示例：符合 Kotlin 代码规范
        val message = getString(R.string.app_name)
        setupViews(message)
    }
    
    private fun setupViews(title: String) {
        // 代码实现
        supportActionBar?.title = title
    }
    
    companion object {
        private const val TAG = "ExampleActivity"
    }
}
EOF
    echo "📝 已创建示例文件: ${PACKAGE_DIR}/ExampleActivity.kt"
  fi
fi

echo ""
echo "✅ Android Lint/Ktlint 脚本与配置初始化完成！"
echo "   - lint.xml (Android Lint 规则配置)"
echo "   - .editorconfig (Ktlint 代码风格配置)"
echo "   - .gitignore (如果不存在)"
echo "   - gradle-lint-config.${DSL_TYPE} (Gradle 配置示例)"
echo "   - scripts/android-smart-commit.sh (智能提交脚本)"
echo "   - Makefile (快捷命令)"
if [ -d "app/src/main/java" ]; then
echo "   - ExampleActivity.kt (示例代码文件)"
fi
echo ""
echo "🎯 下一步配置："
echo "   1. 运行 'make setup' 查看配置说明"
echo "   2. 将 gradle-lint-config 中的内容添加到对应的 Gradle 文件"
echo "   3. 运行 'make lint' 检查 Android Lint"
echo "   4. 运行 'make ktlint' 检查 Kotlin 代码风格"
echo "   5. 使用 'make commit' 进行智能提交"
echo ""
echo "📖 常用命令："
echo "   • make lint         - 运行 Android Lint 检查"
echo "   • make ktlint       - 运行 Ktlint 检查"
echo "   • make format       - 自动格式化 Kotlin 代码"
echo "   • make commit       - 智能提交（格式化需询问，检查错误时会询问）"
echo "   • make commit-force - 强制提交（忽略 lint 错误）"
echo "" 